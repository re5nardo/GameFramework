// automatically generated by the FlatBuffers compiler, do not modify

namespace FBS
{

using System;
using FlatBuffers;

public sealed class GameInputSkillToR : Table {
  public static GameInputSkillToR GetRootAsGameInputSkillToR(ByteBuffer _bb) { return GetRootAsGameInputSkillToR(_bb, new GameInputSkillToR()); }
  public static GameInputSkillToR GetRootAsGameInputSkillToR(ByteBuffer _bb, GameInputSkillToR obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public GameInputSkillToR __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int PlayerIndex { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public int SkillID { get { int o = __offset(6); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public FBS.Data.Vector3 GetVector3s(int j) { return GetVector3s(new FBS.Data.Vector3(), j); }
  public FBS.Data.Vector3 GetVector3s(FBS.Data.Vector3 obj, int j) { int o = __offset(8); return o != 0 ? obj.__init(__vector(o) + j * 12, bb) : null; }
  public int Vector3sLength { get { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; } }
  public int GetInts(int j) { int o = __offset(10); return o != 0 ? bb.GetInt(__vector(o) + j * 4) : (int)0; }
  public int IntsLength { get { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetIntsBytes() { return __vector_as_arraysegment(10); }
  public float GetFloats(int j) { int o = __offset(12); return o != 0 ? bb.GetFloat(__vector(o) + j * 4) : (float)0; }
  public int FloatsLength { get { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetFloatsBytes() { return __vector_as_arraysegment(12); }
  public InputType Input { get { int o = __offset(14); return o != 0 ? (InputType)bb.GetSbyte(o + bb_pos) : InputType.Click; } }

  public static Offset<GameInputSkillToR> CreateGameInputSkillToR(FlatBufferBuilder builder,
      int PlayerIndex = 0,
      int SkillID = 0,
      VectorOffset Vector3sOffset = default(VectorOffset),
      VectorOffset IntsOffset = default(VectorOffset),
      VectorOffset FloatsOffset = default(VectorOffset),
      InputType Input = InputType.Click) {
    builder.StartObject(6);
    GameInputSkillToR.AddFloats(builder, FloatsOffset);
    GameInputSkillToR.AddInts(builder, IntsOffset);
    GameInputSkillToR.AddVector3s(builder, Vector3sOffset);
    GameInputSkillToR.AddSkillID(builder, SkillID);
    GameInputSkillToR.AddPlayerIndex(builder, PlayerIndex);
    GameInputSkillToR.AddInput(builder, Input);
    return GameInputSkillToR.EndGameInputSkillToR(builder);
  }

  public static void StartGameInputSkillToR(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddPlayerIndex(FlatBufferBuilder builder, int PlayerIndex) { builder.AddInt(0, PlayerIndex, 0); }
  public static void AddSkillID(FlatBufferBuilder builder, int SkillID) { builder.AddInt(1, SkillID, 0); }
  public static void AddVector3s(FlatBufferBuilder builder, VectorOffset Vector3sOffset) { builder.AddOffset(2, Vector3sOffset.Value, 0); }
  public static void StartVector3sVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddInts(FlatBufferBuilder builder, VectorOffset IntsOffset) { builder.AddOffset(3, IntsOffset.Value, 0); }
  public static VectorOffset CreateIntsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static void StartIntsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFloats(FlatBufferBuilder builder, VectorOffset FloatsOffset) { builder.AddOffset(4, FloatsOffset.Value, 0); }
  public static VectorOffset CreateFloatsVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static void StartFloatsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInput(FlatBufferBuilder builder, InputType Input) { builder.AddSbyte(5, (sbyte)Input, 0); }
  public static Offset<GameInputSkillToR> EndGameInputSkillToR(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GameInputSkillToR>(o);
  }
};


}
