// automatically generated by the FlatBuffers compiler, do not modify

namespace FBS.PlayerInput
{

using System;
using FlatBuffers;

public sealed class Rotation : Table {
  public static Rotation GetRootAsRotation(ByteBuffer _bb) { return GetRootAsRotation(_bb, new Rotation()); }
  public static Rotation GetRootAsRotation(ByteBuffer _bb, Rotation obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public Rotation __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int EntityID { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public FBS.Data.Vector3 Rot { get { return GetRot(new FBS.Data.Vector3()); } }
  public FBS.Data.Vector3 GetRot(FBS.Data.Vector3 obj) { int o = __offset(6); return o != 0 ? obj.__init(o + bb_pos, bb) : null; }

  public static void StartRotation(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddEntityID(FlatBufferBuilder builder, int EntityID) { builder.AddInt(0, EntityID, 0); }
  public static void AddRot(FlatBufferBuilder builder, Offset<FBS.Data.Vector3> RotOffset) { builder.AddStruct(1, RotOffset.Value, 0); }
  public static Offset<Rotation> EndRotation(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Rotation>(o);
  }
};


}
