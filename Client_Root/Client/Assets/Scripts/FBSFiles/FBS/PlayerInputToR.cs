// automatically generated by the FlatBuffers compiler, do not modify

namespace FBS
{

using System;
using FlatBuffers;

public sealed class PlayerInputToR : Table {
  public static PlayerInputToR GetRootAsPlayerInputToR(ByteBuffer _bb) { return GetRootAsPlayerInputToR(_bb, new PlayerInputToR()); }
  public static PlayerInputToR GetRootAsPlayerInputToR(ByteBuffer _bb, PlayerInputToR obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public PlayerInputToR __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public FBS.PlayerInputType Type { get { int o = __offset(4); return o != 0 ? (FBS.PlayerInputType)bb.GetSbyte(o + bb_pos) : FBS.PlayerInputType.Position; } }
  public sbyte GetData(int j) { int o = __offset(6); return o != 0 ? bb.GetSbyte(__vector(o) + j * 1) : (sbyte)0; }
  public int DataLength { get { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; } }
  public ArraySegment<byte>? GetDataBytes() { return __vector_as_arraysegment(6); }

  public static Offset<PlayerInputToR> CreatePlayerInputToR(FlatBufferBuilder builder,
      FBS.PlayerInputType Type = FBS.PlayerInputType.Position,
      VectorOffset DataOffset = default(VectorOffset)) {
    builder.StartObject(2);
    PlayerInputToR.AddData(builder, DataOffset);
    PlayerInputToR.AddType(builder, Type);
    return PlayerInputToR.EndPlayerInputToR(builder);
  }

  public static void StartPlayerInputToR(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddType(FlatBufferBuilder builder, FBS.PlayerInputType Type) { builder.AddSbyte(0, (sbyte)Type, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset DataOffset) { builder.AddOffset(1, DataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<PlayerInputToR> EndPlayerInputToR(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PlayerInputToR>(o);
  }
};


}
