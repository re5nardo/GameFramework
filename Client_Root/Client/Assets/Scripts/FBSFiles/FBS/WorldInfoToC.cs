// automatically generated by the FlatBuffers compiler, do not modify

namespace FBS
{

using System;
using FlatBuffers;

public sealed class WorldInfoToC : Table {
  public static WorldInfoToC GetRootAsWorldInfoToC(ByteBuffer _bb) { return GetRootAsWorldInfoToC(_bb, new WorldInfoToC()); }
  public static WorldInfoToC GetRootAsWorldInfoToC(ByteBuffer _bb, WorldInfoToC obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public WorldInfoToC __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public int Tick { get { int o = __offset(4); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }
  public float StartTime { get { int o = __offset(6); return o != 0 ? bb.GetFloat(o + bb_pos) : (float)0.0f; } }
  public float EndTime { get { int o = __offset(8); return o != 0 ? bb.GetFloat(o + bb_pos) : (float)0.0f; } }
  public FBS.GameEventData GetGameEvents(int j) { return GetGameEvents(new FBS.GameEventData(), j); }
  public FBS.GameEventData GetGameEvents(FBS.GameEventData obj, int j) { int o = __offset(10); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int GameEventsLength { get { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<WorldInfoToC> CreateWorldInfoToC(FlatBufferBuilder builder,
      int Tick = 0,
      float StartTime = 0.0f,
      float EndTime = 0.0f,
      VectorOffset GameEventsOffset = default(VectorOffset)) {
    builder.StartObject(4);
    WorldInfoToC.AddGameEvents(builder, GameEventsOffset);
    WorldInfoToC.AddEndTime(builder, EndTime);
    WorldInfoToC.AddStartTime(builder, StartTime);
    WorldInfoToC.AddTick(builder, Tick);
    return WorldInfoToC.EndWorldInfoToC(builder);
  }

  public static void StartWorldInfoToC(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddTick(FlatBufferBuilder builder, int Tick) { builder.AddInt(0, Tick, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, float StartTime) { builder.AddFloat(1, StartTime, 0.0f); }
  public static void AddEndTime(FlatBufferBuilder builder, float EndTime) { builder.AddFloat(2, EndTime, 0.0f); }
  public static void AddGameEvents(FlatBufferBuilder builder, VectorOffset GameEventsOffset) { builder.AddOffset(3, GameEventsOffset.Value, 0); }
  public static VectorOffset CreateGameEventsVector(FlatBufferBuilder builder, Offset<FBS.GameEventData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartGameEventsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<WorldInfoToC> EndWorldInfoToC(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<WorldInfoToC>(o);
  }
};


}
