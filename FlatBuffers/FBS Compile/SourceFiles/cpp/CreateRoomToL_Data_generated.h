// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CREATEROOMTOLDATA_H_
#define FLATBUFFERS_GENERATED_CREATEROOMTOLDATA_H_

#include "flatbuffers/flatbuffers.h"

struct CreateRoomToL_Data;

struct CreateRoomToL_Data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_RESULT = 4,
    VT_PLAYERS = 6
  };
  int32_t Result() const { return GetField<int32_t>(VT_RESULT, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *Players() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_PLAYERS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_RESULT) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PLAYERS) &&
           verifier.Verify(Players()) &&
           verifier.VerifyVectorOfStrings(Players()) &&
           verifier.EndTable();
  }
};

struct CreateRoomToL_DataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Result(int32_t Result) { fbb_.AddElement<int32_t>(CreateRoomToL_Data::VT_RESULT, Result, 0); }
  void add_Players(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> Players) { fbb_.AddOffset(CreateRoomToL_Data::VT_PLAYERS, Players); }
  CreateRoomToL_DataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CreateRoomToL_DataBuilder &operator=(const CreateRoomToL_DataBuilder &);
  flatbuffers::Offset<CreateRoomToL_Data> Finish() {
    auto o = flatbuffers::Offset<CreateRoomToL_Data>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<CreateRoomToL_Data> CreateCreateRoomToL_Data(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Result = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> Players = 0) {
  CreateRoomToL_DataBuilder builder_(_fbb);
  builder_.add_Players(Players);
  builder_.add_Result(Result);
  return builder_.Finish();
}

inline flatbuffers::Offset<CreateRoomToL_Data> CreateCreateRoomToL_DataDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Result = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *Players = nullptr) {
  return CreateCreateRoomToL_Data(_fbb, Result, Players ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*Players) : 0);
}

#endif  // FLATBUFFERS_GENERATED_CREATEROOMTOLDATA_H_
