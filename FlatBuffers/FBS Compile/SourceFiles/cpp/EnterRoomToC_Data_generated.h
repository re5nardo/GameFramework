// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_ENTERROOMTOCDATA_H_
#define FLATBUFFERS_GENERATED_ENTERROOMTOCDATA_H_

#include "flatbuffers/flatbuffers.h"

struct EnterRoomToC_Data;

struct EnterRoomToC_Data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_RESULT = 4,
    VT_PLAYERINDEX = 6,
    VT_PLAYERSMAPKEY = 8,
    VT_PLAYERSMAPVALUE = 10
  };
  int32_t Result() const { return GetField<int32_t>(VT_RESULT, 0); }
  int32_t PlayerIndex() const { return GetField<int32_t>(VT_PLAYERINDEX, 0); }
  const flatbuffers::Vector<int32_t> *PlayersMapKey() const { return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_PLAYERSMAPKEY); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *PlayersMapValue() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_PLAYERSMAPVALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_RESULT) &&
           VerifyField<int32_t>(verifier, VT_PLAYERINDEX) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PLAYERSMAPKEY) &&
           verifier.Verify(PlayersMapKey()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PLAYERSMAPVALUE) &&
           verifier.Verify(PlayersMapValue()) &&
           verifier.VerifyVectorOfStrings(PlayersMapValue()) &&
           verifier.EndTable();
  }
};

struct EnterRoomToC_DataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Result(int32_t Result) { fbb_.AddElement<int32_t>(EnterRoomToC_Data::VT_RESULT, Result, 0); }
  void add_PlayerIndex(int32_t PlayerIndex) { fbb_.AddElement<int32_t>(EnterRoomToC_Data::VT_PLAYERINDEX, PlayerIndex, 0); }
  void add_PlayersMapKey(flatbuffers::Offset<flatbuffers::Vector<int32_t>> PlayersMapKey) { fbb_.AddOffset(EnterRoomToC_Data::VT_PLAYERSMAPKEY, PlayersMapKey); }
  void add_PlayersMapValue(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> PlayersMapValue) { fbb_.AddOffset(EnterRoomToC_Data::VT_PLAYERSMAPVALUE, PlayersMapValue); }
  EnterRoomToC_DataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  EnterRoomToC_DataBuilder &operator=(const EnterRoomToC_DataBuilder &);
  flatbuffers::Offset<EnterRoomToC_Data> Finish() {
    auto o = flatbuffers::Offset<EnterRoomToC_Data>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<EnterRoomToC_Data> CreateEnterRoomToC_Data(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Result = 0,
    int32_t PlayerIndex = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> PlayersMapKey = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> PlayersMapValue = 0) {
  EnterRoomToC_DataBuilder builder_(_fbb);
  builder_.add_PlayersMapValue(PlayersMapValue);
  builder_.add_PlayersMapKey(PlayersMapKey);
  builder_.add_PlayerIndex(PlayerIndex);
  builder_.add_Result(Result);
  return builder_.Finish();
}

inline flatbuffers::Offset<EnterRoomToC_Data> CreateEnterRoomToC_DataDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Result = 0,
    int32_t PlayerIndex = 0,
    const std::vector<int32_t> *PlayersMapKey = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *PlayersMapValue = nullptr) {
  return CreateEnterRoomToC_Data(_fbb, Result, PlayerIndex, PlayersMapKey ? _fbb.CreateVector<int32_t>(*PlayersMapKey) : 0, PlayersMapValue ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*PlayersMapValue) : 0);
}

#endif  // FLATBUFFERS_GENERATED_ENTERROOMTOCDATA_H_
