// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GAMEEVENTDATA_FBS_H_
#define FLATBUFFERS_GENERATED_GAMEEVENTDATA_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace FBS {

struct GameEventData;

enum GameEventType {
  GameEventType_BehaviorStart = 0,
  GameEventType_BehaviorEnd = 1,
  GameEventType_StateStart = 2,
  GameEventType_StateEnd = 3,
  GameEventType_Position = 4,
  GameEventType_Rotation = 5,
  GameEventType_Collision = 6,
  GameEventType_MIN = GameEventType_BehaviorStart,
  GameEventType_MAX = GameEventType_Collision
};

inline const char **EnumNamesGameEventType() {
  static const char *names[] = { "BehaviorStart", "BehaviorEnd", "StateStart", "StateEnd", "Position", "Rotation", "Collision", nullptr };
  return names;
}

inline const char *EnumNameGameEventType(GameEventType e) { return EnumNamesGameEventType()[static_cast<int>(e)]; }

struct GameEventData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_EVENTTIME = 6,
    VT_DATA = 8
  };
  GameEventType Type() const { return static_cast<GameEventType>(GetField<int8_t>(VT_TYPE, 0)); }
  float EventTime() const { return GetField<float>(VT_EVENTTIME, 0.0f); }
  const flatbuffers::Vector<int8_t> *Data() const { return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_DATA); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<float>(verifier, VT_EVENTTIME) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DATA) &&
           verifier.Verify(Data()) &&
           verifier.EndTable();
  }
};

struct GameEventDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Type(GameEventType Type) { fbb_.AddElement<int8_t>(GameEventData::VT_TYPE, static_cast<int8_t>(Type), 0); }
  void add_EventTime(float EventTime) { fbb_.AddElement<float>(GameEventData::VT_EVENTTIME, EventTime, 0.0f); }
  void add_Data(flatbuffers::Offset<flatbuffers::Vector<int8_t>> Data) { fbb_.AddOffset(GameEventData::VT_DATA, Data); }
  GameEventDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GameEventDataBuilder &operator=(const GameEventDataBuilder &);
  flatbuffers::Offset<GameEventData> Finish() {
    auto o = flatbuffers::Offset<GameEventData>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<GameEventData> CreateGameEventData(flatbuffers::FlatBufferBuilder &_fbb,
    GameEventType Type = GameEventType_BehaviorStart,
    float EventTime = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> Data = 0) {
  GameEventDataBuilder builder_(_fbb);
  builder_.add_Data(Data);
  builder_.add_EventTime(EventTime);
  builder_.add_Type(Type);
  return builder_.Finish();
}

inline flatbuffers::Offset<GameEventData> CreateGameEventDataDirect(flatbuffers::FlatBufferBuilder &_fbb,
    GameEventType Type = GameEventType_BehaviorStart,
    float EventTime = 0.0f,
    const std::vector<int8_t> *Data = nullptr) {
  return CreateGameEventData(_fbb, Type, EventTime, Data ? _fbb.CreateVector<int8_t>(*Data) : 0);
}

}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_GAMEEVENTDATA_FBS_H_
