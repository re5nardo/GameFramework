// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GAMEEVENTTELEPORTTOCDATA_H_
#define FLATBUFFERS_GENERATED_GAMEEVENTTELEPORTTOCDATA_H_

#include "flatbuffers/flatbuffers.h"

#include "FBSData_generated.h"

struct GameEventTeleportToC_Data;

struct GameEventTeleportToC_Data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PLAYERINDEX = 4,
    VT_EVENTTIME = 6,
    VT_START = 8,
    VT_DEST = 10,
    VT_STATE = 12
  };
  int32_t PlayerIndex() const { return GetField<int32_t>(VT_PLAYERINDEX, 0); }
  int64_t EventTime() const { return GetField<int64_t>(VT_EVENTTIME, 0); }
  const FBSData::Vector3 *Start() const { return GetStruct<const FBSData::Vector3 *>(VT_START); }
  const FBSData::Vector3 *Dest() const { return GetStruct<const FBSData::Vector3 *>(VT_DEST); }
  int32_t State() const { return GetField<int32_t>(VT_STATE, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PLAYERINDEX) &&
           VerifyField<int64_t>(verifier, VT_EVENTTIME) &&
           VerifyField<FBSData::Vector3>(verifier, VT_START) &&
           VerifyField<FBSData::Vector3>(verifier, VT_DEST) &&
           VerifyField<int32_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct GameEventTeleportToC_DataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_PlayerIndex(int32_t PlayerIndex) { fbb_.AddElement<int32_t>(GameEventTeleportToC_Data::VT_PLAYERINDEX, PlayerIndex, 0); }
  void add_EventTime(int64_t EventTime) { fbb_.AddElement<int64_t>(GameEventTeleportToC_Data::VT_EVENTTIME, EventTime, 0); }
  void add_Start(const FBSData::Vector3 *Start) { fbb_.AddStruct(GameEventTeleportToC_Data::VT_START, Start); }
  void add_Dest(const FBSData::Vector3 *Dest) { fbb_.AddStruct(GameEventTeleportToC_Data::VT_DEST, Dest); }
  void add_State(int32_t State) { fbb_.AddElement<int32_t>(GameEventTeleportToC_Data::VT_STATE, State, 0); }
  GameEventTeleportToC_DataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GameEventTeleportToC_DataBuilder &operator=(const GameEventTeleportToC_DataBuilder &);
  flatbuffers::Offset<GameEventTeleportToC_Data> Finish() {
    auto o = flatbuffers::Offset<GameEventTeleportToC_Data>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<GameEventTeleportToC_Data> CreateGameEventTeleportToC_Data(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t PlayerIndex = 0,
    int64_t EventTime = 0,
    const FBSData::Vector3 *Start = 0,
    const FBSData::Vector3 *Dest = 0,
    int32_t State = 0) {
  GameEventTeleportToC_DataBuilder builder_(_fbb);
  builder_.add_EventTime(EventTime);
  builder_.add_State(State);
  builder_.add_Dest(Dest);
  builder_.add_Start(Start);
  builder_.add_PlayerIndex(PlayerIndex);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_GAMEEVENTTELEPORTTOCDATA_H_
