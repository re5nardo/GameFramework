// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GAMEINPUTMOVETOR_FBS_H_
#define FLATBUFFERS_GENERATED_GAMEINPUTMOVETOR_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace FBS {

struct GameInputMoveToR;

enum MoveDirection {
  MoveDirection_Up = 0,
  MoveDirection_Down = 1,
  MoveDirection_Left = 2,
  MoveDirection_Right = 3,
  MoveDirection_MIN = MoveDirection_Up,
  MoveDirection_MAX = MoveDirection_Right
};

inline const char **EnumNamesMoveDirection() {
  static const char *names[] = { "Up", "Down", "Left", "Right", nullptr };
  return names;
}

inline const char *EnumNameMoveDirection(MoveDirection e) { return EnumNamesMoveDirection()[static_cast<int>(e)]; }

struct GameInputMoveToR FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PLAYERINDEX = 4,
    VT_DIRECTION = 6
  };
  int32_t PlayerIndex() const { return GetField<int32_t>(VT_PLAYERINDEX, 0); }
  MoveDirection Direction() const { return static_cast<MoveDirection>(GetField<int8_t>(VT_DIRECTION, 0)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PLAYERINDEX) &&
           VerifyField<int8_t>(verifier, VT_DIRECTION) &&
           verifier.EndTable();
  }
};

struct GameInputMoveToRBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_PlayerIndex(int32_t PlayerIndex) { fbb_.AddElement<int32_t>(GameInputMoveToR::VT_PLAYERINDEX, PlayerIndex, 0); }
  void add_Direction(MoveDirection Direction) { fbb_.AddElement<int8_t>(GameInputMoveToR::VT_DIRECTION, static_cast<int8_t>(Direction), 0); }
  GameInputMoveToRBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GameInputMoveToRBuilder &operator=(const GameInputMoveToRBuilder &);
  flatbuffers::Offset<GameInputMoveToR> Finish() {
    auto o = flatbuffers::Offset<GameInputMoveToR>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<GameInputMoveToR> CreateGameInputMoveToR(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t PlayerIndex = 0,
    MoveDirection Direction = MoveDirection_Up) {
  GameInputMoveToRBuilder builder_(_fbb);
  builder_.add_PlayerIndex(PlayerIndex);
  builder_.add_Direction(Direction);
  return builder_.Finish();
}

}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_GAMEINPUTMOVETOR_FBS_H_
