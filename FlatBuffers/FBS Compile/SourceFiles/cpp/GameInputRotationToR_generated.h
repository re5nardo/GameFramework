// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GAMEINPUTROTATIONTOR_FBS_H_
#define FLATBUFFERS_GENERATED_GAMEINPUTROTATIONTOR_FBS_H_

#include "flatbuffers/flatbuffers.h"

#include "FBSData_generated.h"

namespace FBS {

struct GameInputRotationToR;

struct GameInputRotationToR FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PLAYERINDEX = 4,
    VT_ROTATION = 6
  };
  int32_t PlayerIndex() const { return GetField<int32_t>(VT_PLAYERINDEX, 0); }
  const FBS::Data::Vector3 *Rotation() const { return GetStruct<const FBS::Data::Vector3 *>(VT_ROTATION); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PLAYERINDEX) &&
           VerifyField<FBS::Data::Vector3>(verifier, VT_ROTATION) &&
           verifier.EndTable();
  }
};

struct GameInputRotationToRBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_PlayerIndex(int32_t PlayerIndex) { fbb_.AddElement<int32_t>(GameInputRotationToR::VT_PLAYERINDEX, PlayerIndex, 0); }
  void add_Rotation(const FBS::Data::Vector3 *Rotation) { fbb_.AddStruct(GameInputRotationToR::VT_ROTATION, Rotation); }
  GameInputRotationToRBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GameInputRotationToRBuilder &operator=(const GameInputRotationToRBuilder &);
  flatbuffers::Offset<GameInputRotationToR> Finish() {
    auto o = flatbuffers::Offset<GameInputRotationToR>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<GameInputRotationToR> CreateGameInputRotationToR(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t PlayerIndex = 0,
    const FBS::Data::Vector3 *Rotation = 0) {
  GameInputRotationToRBuilder builder_(_fbb);
  builder_.add_Rotation(Rotation);
  builder_.add_PlayerIndex(PlayerIndex);
  return builder_.Finish();
}

}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_GAMEINPUTROTATIONTOR_FBS_H_
