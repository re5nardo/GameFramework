// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GAMEITEM_FBS_PLAYERINPUT_H_
#define FLATBUFFERS_GENERATED_GAMEITEM_FBS_PLAYERINPUT_H_

#include "flatbuffers/flatbuffers.h"

#include "FBSData_generated.h"

namespace FBS {
namespace PlayerInput {

struct GameItem;

struct GameItem FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PLAYERINDEX = 4,
    VT_GAMEITEMID = 6
  };
  int32_t PlayerIndex() const { return GetField<int32_t>(VT_PLAYERINDEX, 0); }
  int32_t GameItemID() const { return GetField<int32_t>(VT_GAMEITEMID, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PLAYERINDEX) &&
           VerifyField<int32_t>(verifier, VT_GAMEITEMID) &&
           verifier.EndTable();
  }
};

struct GameItemBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_PlayerIndex(int32_t PlayerIndex) { fbb_.AddElement<int32_t>(GameItem::VT_PLAYERINDEX, PlayerIndex, 0); }
  void add_GameItemID(int32_t GameItemID) { fbb_.AddElement<int32_t>(GameItem::VT_GAMEITEMID, GameItemID, 0); }
  GameItemBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GameItemBuilder &operator=(const GameItemBuilder &);
  flatbuffers::Offset<GameItem> Finish() {
    auto o = flatbuffers::Offset<GameItem>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<GameItem> CreateGameItem(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t PlayerIndex = 0,
    int32_t GameItemID = 0) {
  GameItemBuilder builder_(_fbb);
  builder_.add_GameItemID(GameItemID);
  builder_.add_PlayerIndex(PlayerIndex);
  return builder_.Finish();
}

}  // namespace PlayerInput
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_GAMEITEM_FBS_PLAYERINPUT_H_
