// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PREPARATIONSTATETOR_FBS_H_
#define FLATBUFFERS_GENERATED_PREPARATIONSTATETOR_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace FBS {

struct PreparationStateToR;

struct PreparationStateToR FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_STATE = 4
  };
  float State() const { return GetField<float>(VT_STATE, 0.0f); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct PreparationStateToRBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_State(float State) { fbb_.AddElement<float>(PreparationStateToR::VT_STATE, State, 0.0f); }
  PreparationStateToRBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PreparationStateToRBuilder &operator=(const PreparationStateToRBuilder &);
  flatbuffers::Offset<PreparationStateToR> Finish() {
    auto o = flatbuffers::Offset<PreparationStateToR>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<PreparationStateToR> CreatePreparationStateToR(flatbuffers::FlatBufferBuilder &_fbb,
    float State = 0.0f) {
  PreparationStateToRBuilder builder_(_fbb);
  builder_.add_State(State);
  return builder_.Finish();
}

}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_PREPARATIONSTATETOR_FBS_H_
