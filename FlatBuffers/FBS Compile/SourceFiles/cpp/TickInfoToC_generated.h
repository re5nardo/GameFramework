// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TICKINFOTOC_FBS_H_
#define FLATBUFFERS_GENERATED_TICKINFOTOC_FBS_H_

#include "flatbuffers/flatbuffers.h"

#include "PlayerInputData_generated.h"

namespace FBS {

struct TickInfoToC;

struct TickInfoToC FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TICK = 4,
    VT_PLAYERINPUTS = 6
  };
  int32_t Tick() const { return GetField<int32_t>(VT_TICK, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<FBS::PlayerInputData>> *PlayerInputs() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBS::PlayerInputData>> *>(VT_PLAYERINPUTS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TICK) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PLAYERINPUTS) &&
           verifier.Verify(PlayerInputs()) &&
           verifier.VerifyVectorOfTables(PlayerInputs()) &&
           verifier.EndTable();
  }
};

struct TickInfoToCBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Tick(int32_t Tick) { fbb_.AddElement<int32_t>(TickInfoToC::VT_TICK, Tick, 0); }
  void add_PlayerInputs(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBS::PlayerInputData>>> PlayerInputs) { fbb_.AddOffset(TickInfoToC::VT_PLAYERINPUTS, PlayerInputs); }
  TickInfoToCBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TickInfoToCBuilder &operator=(const TickInfoToCBuilder &);
  flatbuffers::Offset<TickInfoToC> Finish() {
    auto o = flatbuffers::Offset<TickInfoToC>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<TickInfoToC> CreateTickInfoToC(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Tick = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBS::PlayerInputData>>> PlayerInputs = 0) {
  TickInfoToCBuilder builder_(_fbb);
  builder_.add_PlayerInputs(PlayerInputs);
  builder_.add_Tick(Tick);
  return builder_.Finish();
}

inline flatbuffers::Offset<TickInfoToC> CreateTickInfoToCDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Tick = 0,
    const std::vector<flatbuffers::Offset<FBS::PlayerInputData>> *PlayerInputs = nullptr) {
  return CreateTickInfoToC(_fbb, Tick, PlayerInputs ? _fbb.CreateVector<flatbuffers::Offset<FBS::PlayerInputData>>(*PlayerInputs) : 0);
}

}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_TICKINFOTOC_FBS_H_
