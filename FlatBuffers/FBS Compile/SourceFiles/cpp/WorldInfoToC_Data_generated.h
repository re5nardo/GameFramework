// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_WORLDINFOTOCDATA_H_
#define FLATBUFFERS_GENERATED_WORLDINFOTOCDATA_H_

#include "flatbuffers/flatbuffers.h"

struct GameEvent;

struct WorldInfoToC_Data;

enum GameEventType {
  GameEventType_BehaviorStart = 0,
  GameEventType_BehaviorEnd = 1,
  GameEventType_StateStart = 2,
  GameEventType_StateEnd = 3,
  GameEventType_Transform = 4,
  GameEventType_Collision = 5,
  GameEventType_MIN = GameEventType_BehaviorStart,
  GameEventType_MAX = GameEventType_Collision
};

inline const char **EnumNamesGameEventType() {
  static const char *names[] = { "BehaviorStart", "BehaviorEnd", "StateStart", "StateEnd", "Transform", "Collision", nullptr };
  return names;
}

inline const char *EnumNameGameEventType(GameEventType e) { return EnumNamesGameEventType()[static_cast<int>(e)]; }

struct GameEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_DATA = 6
  };
  GameEventType Type() const { return static_cast<GameEventType>(GetField<int8_t>(VT_TYPE, 0)); }
  const flatbuffers::Vector<int8_t> *Data() const { return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_DATA); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DATA) &&
           verifier.Verify(Data()) &&
           verifier.EndTable();
  }
};

struct GameEventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Type(GameEventType Type) { fbb_.AddElement<int8_t>(GameEvent::VT_TYPE, static_cast<int8_t>(Type), 0); }
  void add_Data(flatbuffers::Offset<flatbuffers::Vector<int8_t>> Data) { fbb_.AddOffset(GameEvent::VT_DATA, Data); }
  GameEventBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GameEventBuilder &operator=(const GameEventBuilder &);
  flatbuffers::Offset<GameEvent> Finish() {
    auto o = flatbuffers::Offset<GameEvent>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<GameEvent> CreateGameEvent(flatbuffers::FlatBufferBuilder &_fbb,
    GameEventType Type = GameEventType_BehaviorStart,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> Data = 0) {
  GameEventBuilder builder_(_fbb);
  builder_.add_Data(Data);
  builder_.add_Type(Type);
  return builder_.Finish();
}

inline flatbuffers::Offset<GameEvent> CreateGameEventDirect(flatbuffers::FlatBufferBuilder &_fbb,
    GameEventType Type = GameEventType_BehaviorStart,
    const std::vector<int8_t> *Data = nullptr) {
  return CreateGameEvent(_fbb, Type, Data ? _fbb.CreateVector<int8_t>(*Data) : 0);
}

struct WorldInfoToC_Data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TICK = 4,
    VT_STARTTIME = 6,
    VT_ENDTIME = 8,
    VT_GAMEEVENTS = 10
  };
  int32_t Tick() const { return GetField<int32_t>(VT_TICK, 0); }
  float StartTime() const { return GetField<float>(VT_STARTTIME, 0.0f); }
  float EndTime() const { return GetField<float>(VT_ENDTIME, 0.0f); }
  const flatbuffers::Vector<flatbuffers::Offset<GameEvent>> *GameEvents() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<GameEvent>> *>(VT_GAMEEVENTS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TICK) &&
           VerifyField<float>(verifier, VT_STARTTIME) &&
           VerifyField<float>(verifier, VT_ENDTIME) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_GAMEEVENTS) &&
           verifier.Verify(GameEvents()) &&
           verifier.VerifyVectorOfTables(GameEvents()) &&
           verifier.EndTable();
  }
};

struct WorldInfoToC_DataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Tick(int32_t Tick) { fbb_.AddElement<int32_t>(WorldInfoToC_Data::VT_TICK, Tick, 0); }
  void add_StartTime(float StartTime) { fbb_.AddElement<float>(WorldInfoToC_Data::VT_STARTTIME, StartTime, 0.0f); }
  void add_EndTime(float EndTime) { fbb_.AddElement<float>(WorldInfoToC_Data::VT_ENDTIME, EndTime, 0.0f); }
  void add_GameEvents(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GameEvent>>> GameEvents) { fbb_.AddOffset(WorldInfoToC_Data::VT_GAMEEVENTS, GameEvents); }
  WorldInfoToC_DataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  WorldInfoToC_DataBuilder &operator=(const WorldInfoToC_DataBuilder &);
  flatbuffers::Offset<WorldInfoToC_Data> Finish() {
    auto o = flatbuffers::Offset<WorldInfoToC_Data>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<WorldInfoToC_Data> CreateWorldInfoToC_Data(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Tick = 0,
    float StartTime = 0.0f,
    float EndTime = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GameEvent>>> GameEvents = 0) {
  WorldInfoToC_DataBuilder builder_(_fbb);
  builder_.add_GameEvents(GameEvents);
  builder_.add_EndTime(EndTime);
  builder_.add_StartTime(StartTime);
  builder_.add_Tick(Tick);
  return builder_.Finish();
}

inline flatbuffers::Offset<WorldInfoToC_Data> CreateWorldInfoToC_DataDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Tick = 0,
    float StartTime = 0.0f,
    float EndTime = 0.0f,
    const std::vector<flatbuffers::Offset<GameEvent>> *GameEvents = nullptr) {
  return CreateWorldInfoToC_Data(_fbb, Tick, StartTime, EndTime, GameEvents ? _fbb.CreateVector<flatbuffers::Offset<GameEvent>>(*GameEvents) : 0);
}

#endif  // FLATBUFFERS_GENERATED_WORLDINFOTOCDATA_H_
