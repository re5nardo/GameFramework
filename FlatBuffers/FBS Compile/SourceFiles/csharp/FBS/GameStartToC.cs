// automatically generated by the FlatBuffers compiler, do not modify

namespace FBS
{

using System;
using FlatBuffers;

public sealed class GameStartToC : Table {
  public static GameStartToC GetRootAsGameStartToC(ByteBuffer _bb) { return GetRootAsGameStartToC(_bb, new GameStartToC()); }
  public static GameStartToC GetRootAsGameStartToC(ByteBuffer _bb, GameStartToC obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public GameStartToC __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public float TickInterval { get { int o = __offset(4); return o != 0 ? bb.GetFloat(o + bb_pos) : (float)0.0f; } }
  public int RandomSeed { get { int o = __offset(6); return o != 0 ? bb.GetInt(o + bb_pos) : (int)0; } }

  public static Offset<GameStartToC> CreateGameStartToC(FlatBufferBuilder builder,
      float TickInterval = 0.0f,
      int RandomSeed = 0) {
    builder.StartObject(2);
    GameStartToC.AddRandomSeed(builder, RandomSeed);
    GameStartToC.AddTickInterval(builder, TickInterval);
    return GameStartToC.EndGameStartToC(builder);
  }

  public static void StartGameStartToC(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTickInterval(FlatBufferBuilder builder, float TickInterval) { builder.AddFloat(0, TickInterval, 0.0f); }
  public static void AddRandomSeed(FlatBufferBuilder builder, int RandomSeed) { builder.AddInt(1, RandomSeed, 0); }
  public static Offset<GameStartToC> EndGameStartToC(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GameStartToC>(o);
  }
};


}
