// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_COLLISION_FBS_GAMEEVENT_H_
#define FLATBUFFERS_GENERATED_COLLISION_FBS_GAMEEVENT_H_

#include "flatbuffers/flatbuffers.h"

#include "FBSData_generated.h"

namespace FBS {
namespace GameEvent {

struct Collision;

struct Collision FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ENTITYID = 4,
    VT_POS = 6
  };
  int32_t EntityID() const { return GetField<int32_t>(VT_ENTITYID, 0); }
  const FBS::Data::Vector3 *Pos() const { return GetStruct<const FBS::Data::Vector3 *>(VT_POS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ENTITYID) &&
           VerifyField<FBS::Data::Vector3>(verifier, VT_POS) &&
           verifier.EndTable();
  }
};

struct CollisionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_EntityID(int32_t EntityID) { fbb_.AddElement<int32_t>(Collision::VT_ENTITYID, EntityID, 0); }
  void add_Pos(const FBS::Data::Vector3 *Pos) { fbb_.AddStruct(Collision::VT_POS, Pos); }
  CollisionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CollisionBuilder &operator=(const CollisionBuilder &);
  flatbuffers::Offset<Collision> Finish() {
    auto o = flatbuffers::Offset<Collision>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Collision> CreateCollision(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t EntityID = 0,
    const FBS::Data::Vector3 *Pos = 0) {
  CollisionBuilder builder_(_fbb);
  builder_.add_Pos(Pos);
  builder_.add_EntityID(EntityID);
  return builder_.Finish();
}

}  // namespace GameEvent
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_COLLISION_FBS_GAMEEVENT_H_
