// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_ENTERROOMTOR_FBS_H_
#define FLATBUFFERS_GENERATED_ENTERROOMTOR_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace FBS {

struct EnterRoomToR;

struct EnterRoomToR FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PLAYERKEY = 4,
    VT_AUTHKEY = 6,
    VT_MATCHID = 8
  };
  const flatbuffers::String *PlayerKey() const { return GetPointer<const flatbuffers::String *>(VT_PLAYERKEY); }
  int32_t AuthKey() const { return GetField<int32_t>(VT_AUTHKEY, 0); }
  int32_t MatchID() const { return GetField<int32_t>(VT_MATCHID, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PLAYERKEY) &&
           verifier.Verify(PlayerKey()) &&
           VerifyField<int32_t>(verifier, VT_AUTHKEY) &&
           VerifyField<int32_t>(verifier, VT_MATCHID) &&
           verifier.EndTable();
  }
};

struct EnterRoomToRBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_PlayerKey(flatbuffers::Offset<flatbuffers::String> PlayerKey) { fbb_.AddOffset(EnterRoomToR::VT_PLAYERKEY, PlayerKey); }
  void add_AuthKey(int32_t AuthKey) { fbb_.AddElement<int32_t>(EnterRoomToR::VT_AUTHKEY, AuthKey, 0); }
  void add_MatchID(int32_t MatchID) { fbb_.AddElement<int32_t>(EnterRoomToR::VT_MATCHID, MatchID, 0); }
  EnterRoomToRBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  EnterRoomToRBuilder &operator=(const EnterRoomToRBuilder &);
  flatbuffers::Offset<EnterRoomToR> Finish() {
    auto o = flatbuffers::Offset<EnterRoomToR>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<EnterRoomToR> CreateEnterRoomToR(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> PlayerKey = 0,
    int32_t AuthKey = 0,
    int32_t MatchID = 0) {
  EnterRoomToRBuilder builder_(_fbb);
  builder_.add_MatchID(MatchID);
  builder_.add_AuthKey(AuthKey);
  builder_.add_PlayerKey(PlayerKey);
  return builder_.Finish();
}

inline flatbuffers::Offset<EnterRoomToR> CreateEnterRoomToRDirect(flatbuffers::FlatBufferBuilder &_fbb,
    const char *PlayerKey = nullptr,
    int32_t AuthKey = 0,
    int32_t MatchID = 0) {
  return CreateEnterRoomToR(_fbb, PlayerKey ? _fbb.CreateString(PlayerKey) : 0, AuthKey, MatchID);
}

}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_ENTERROOMTOR_FBS_H_
