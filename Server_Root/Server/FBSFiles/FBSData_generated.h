// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBSDATA_FBS_DATA_H_
#define FLATBUFFERS_GENERATED_FBSDATA_FBS_DATA_H_

#include "flatbuffers/flatbuffers.h"

namespace FBS {
namespace Data {

struct Vector3;

struct CharacterStat;

enum EntityType {
  EntityType_Character = 0,
  EntityType_Projectile = 1,
  EntityType_Item = 2,
  EntityType_MIN = EntityType_Character,
  EntityType_MAX = EntityType_Item
};

inline const char **EnumNamesEntityType() {
  static const char *names[] = { "Character", "Projectile", "Item", nullptr };
  return names;
}

inline const char *EnumNameEntityType(EntityType e) { return EnumNamesEntityType()[static_cast<int>(e)]; }

MANUALLY_ALIGNED_STRUCT(4) Vector3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vector3() { memset(this, 0, sizeof(Vector3)); }
  Vector3(const Vector3 &_o) { memcpy(this, &_o, sizeof(Vector3)); }
  Vector3(float _x, float _y, float _z)
    : x_(flatbuffers::EndianScalar(_x)), y_(flatbuffers::EndianScalar(_y)), z_(flatbuffers::EndianScalar(_z)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
  float z() const { return flatbuffers::EndianScalar(z_); }
};
STRUCT_END(Vector3, 12);

MANUALLY_ALIGNED_STRUCT(4) CharacterStat FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t HP_;
  int32_t MP_;
  float MPChargeRate_;
  float MaximumSpeed_;
  float Strength_;

 public:
  CharacterStat() { memset(this, 0, sizeof(CharacterStat)); }
  CharacterStat(const CharacterStat &_o) { memcpy(this, &_o, sizeof(CharacterStat)); }
  CharacterStat(int32_t _HP, int32_t _MP, float _MPChargeRate, float _MaximumSpeed, float _Strength)
    : HP_(flatbuffers::EndianScalar(_HP)), MP_(flatbuffers::EndianScalar(_MP)), MPChargeRate_(flatbuffers::EndianScalar(_MPChargeRate)), MaximumSpeed_(flatbuffers::EndianScalar(_MaximumSpeed)), Strength_(flatbuffers::EndianScalar(_Strength)) { }

  int32_t HP() const { return flatbuffers::EndianScalar(HP_); }
  int32_t MP() const { return flatbuffers::EndianScalar(MP_); }
  float MPChargeRate() const { return flatbuffers::EndianScalar(MPChargeRate_); }
  float MaximumSpeed() const { return flatbuffers::EndianScalar(MaximumSpeed_); }
  float Strength() const { return flatbuffers::EndianScalar(Strength_); }
};
STRUCT_END(CharacterStat, 20);

}  // namespace Data
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_FBSDATA_FBS_DATA_H_
