// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FBSDATA_FBS_DATA_H_
#define FLATBUFFERS_GENERATED_FBSDATA_FBS_DATA_H_

#include "flatbuffers/flatbuffers.h"

namespace FBS {
namespace Data {

struct Vector3;

struct CharacterStatus;

struct PlayerRankInfo;

enum EntityType {
  EntityType_Character = 0,
  EntityType_Projectile = 1,
  EntityType_Item = 2,
  EntityType_MIN = EntityType_Character,
  EntityType_MAX = EntityType_Item
};

inline const char **EnumNamesEntityType() {
  static const char *names[] = { "Character", "Projectile", "Item", nullptr };
  return names;
}

inline const char *EnumNameEntityType(EntityType e) { return EnumNamesEntityType()[static_cast<int>(e)]; }

MANUALLY_ALIGNED_STRUCT(4) Vector3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vector3() { memset(this, 0, sizeof(Vector3)); }
  Vector3(const Vector3 &_o) { memcpy(this, &_o, sizeof(Vector3)); }
  Vector3(float _x, float _y, float _z)
    : x_(flatbuffers::EndianScalar(_x)), y_(flatbuffers::EndianScalar(_y)), z_(flatbuffers::EndianScalar(_z)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
  float z() const { return flatbuffers::EndianScalar(z_); }
};
STRUCT_END(Vector3, 12);

MANUALLY_ALIGNED_STRUCT(4) CharacterStatus FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t MaximumHP_;
  int32_t HP_;
  int32_t MaximumMP_;
  int32_t MP_;
  float MaximumSpeed_;
  float Speed_;
  float MPChargeRate_;
  float MovePoint_;

 public:
  CharacterStatus() { memset(this, 0, sizeof(CharacterStatus)); }
  CharacterStatus(const CharacterStatus &_o) { memcpy(this, &_o, sizeof(CharacterStatus)); }
  CharacterStatus(int32_t _MaximumHP, int32_t _HP, int32_t _MaximumMP, int32_t _MP, float _MaximumSpeed, float _Speed, float _MPChargeRate, float _MovePoint)
    : MaximumHP_(flatbuffers::EndianScalar(_MaximumHP)), HP_(flatbuffers::EndianScalar(_HP)), MaximumMP_(flatbuffers::EndianScalar(_MaximumMP)), MP_(flatbuffers::EndianScalar(_MP)), MaximumSpeed_(flatbuffers::EndianScalar(_MaximumSpeed)), Speed_(flatbuffers::EndianScalar(_Speed)), MPChargeRate_(flatbuffers::EndianScalar(_MPChargeRate)), MovePoint_(flatbuffers::EndianScalar(_MovePoint)) { }

  int32_t MaximumHP() const { return flatbuffers::EndianScalar(MaximumHP_); }
  int32_t HP() const { return flatbuffers::EndianScalar(HP_); }
  int32_t MaximumMP() const { return flatbuffers::EndianScalar(MaximumMP_); }
  int32_t MP() const { return flatbuffers::EndianScalar(MP_); }
  float MaximumSpeed() const { return flatbuffers::EndianScalar(MaximumSpeed_); }
  float Speed() const { return flatbuffers::EndianScalar(Speed_); }
  float MPChargeRate() const { return flatbuffers::EndianScalar(MPChargeRate_); }
  float MovePoint() const { return flatbuffers::EndianScalar(MovePoint_); }
};
STRUCT_END(CharacterStatus, 32);

MANUALLY_ALIGNED_STRUCT(4) PlayerRankInfo FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t PlayerIndex_;
  int32_t Rank_;
  float Height_;

 public:
  PlayerRankInfo() { memset(this, 0, sizeof(PlayerRankInfo)); }
  PlayerRankInfo(const PlayerRankInfo &_o) { memcpy(this, &_o, sizeof(PlayerRankInfo)); }
  PlayerRankInfo(int32_t _PlayerIndex, int32_t _Rank, float _Height)
    : PlayerIndex_(flatbuffers::EndianScalar(_PlayerIndex)), Rank_(flatbuffers::EndianScalar(_Rank)), Height_(flatbuffers::EndianScalar(_Height)) { }

  int32_t PlayerIndex() const { return flatbuffers::EndianScalar(PlayerIndex_); }
  int32_t Rank() const { return flatbuffers::EndianScalar(Rank_); }
  float Height() const { return flatbuffers::EndianScalar(Height_); }
};
STRUCT_END(PlayerRankInfo, 12);

}  // namespace Data
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_FBSDATA_FBS_DATA_H_
