// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_ROTATION_FBS_PLAYERINPUT_H_
#define FLATBUFFERS_GENERATED_ROTATION_FBS_PLAYERINPUT_H_

#include "flatbuffers/flatbuffers.h"

#include "../FBSData_generated.h"

namespace FBS {
namespace PlayerInput {

struct Rotation;

struct Rotation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ENTITYID = 4,
    VT_ROT = 6
  };
  int32_t EntityID() const { return GetField<int32_t>(VT_ENTITYID, 0); }
  const FBS::Data::Vector3 *Rot() const { return GetStruct<const FBS::Data::Vector3 *>(VT_ROT); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ENTITYID) &&
           VerifyField<FBS::Data::Vector3>(verifier, VT_ROT) &&
           verifier.EndTable();
  }
};

struct RotationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_EntityID(int32_t EntityID) { fbb_.AddElement<int32_t>(Rotation::VT_ENTITYID, EntityID, 0); }
  void add_Rot(const FBS::Data::Vector3 *Rot) { fbb_.AddStruct(Rotation::VT_ROT, Rot); }
  RotationBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  RotationBuilder &operator=(const RotationBuilder &);
  flatbuffers::Offset<Rotation> Finish() {
    auto o = flatbuffers::Offset<Rotation>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<Rotation> CreateRotation(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t EntityID = 0,
    const FBS::Data::Vector3 *Rot = 0) {
  RotationBuilder builder_(_fbb);
  builder_.add_Rot(Rot);
  builder_.add_EntityID(EntityID);
  return builder_.Finish();
}

}  // namespace PlayerInput
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_ROTATION_FBS_PLAYERINPUT_H_
