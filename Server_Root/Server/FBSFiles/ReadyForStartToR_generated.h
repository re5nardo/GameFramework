// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_READYFORSTARTTOR_FBS_H_
#define FLATBUFFERS_GENERATED_READYFORSTARTTOR_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace FBS {

struct ReadyForStartToR;

struct ReadyForStartToR FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PLAYERINDEX = 4
  };
  int32_t PlayerIndex() const { return GetField<int32_t>(VT_PLAYERINDEX, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PLAYERINDEX) &&
           verifier.EndTable();
  }
};

struct ReadyForStartToRBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_PlayerIndex(int32_t PlayerIndex) { fbb_.AddElement<int32_t>(ReadyForStartToR::VT_PLAYERINDEX, PlayerIndex, 0); }
  ReadyForStartToRBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ReadyForStartToRBuilder &operator=(const ReadyForStartToRBuilder &);
  flatbuffers::Offset<ReadyForStartToR> Finish() {
    auto o = flatbuffers::Offset<ReadyForStartToR>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<ReadyForStartToR> CreateReadyForStartToR(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t PlayerIndex = 0) {
  ReadyForStartToRBuilder builder_(_fbb);
  builder_.add_PlayerIndex(PlayerIndex);
  return builder_.Finish();
}

}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_READYFORSTARTTOR_FBS_H_
