// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_STATEEND_FBS_GAMEEVENT_H_
#define FLATBUFFERS_GENERATED_STATEEND_FBS_GAMEEVENT_H_

#include "flatbuffers/flatbuffers.h"

namespace FBS {
namespace GameEvent {

struct StateEnd;

struct StateEnd FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ENTITYID = 4,
    VT_ENDTIME = 6,
    VT_STATEID = 8
  };
  int32_t EntityID() const { return GetField<int32_t>(VT_ENTITYID, 0); }
  float EndTime() const { return GetField<float>(VT_ENDTIME, 0.0f); }
  int32_t StateID() const { return GetField<int32_t>(VT_STATEID, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ENTITYID) &&
           VerifyField<float>(verifier, VT_ENDTIME) &&
           VerifyField<int32_t>(verifier, VT_STATEID) &&
           verifier.EndTable();
  }
};

struct StateEndBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_EntityID(int32_t EntityID) { fbb_.AddElement<int32_t>(StateEnd::VT_ENTITYID, EntityID, 0); }
  void add_EndTime(float EndTime) { fbb_.AddElement<float>(StateEnd::VT_ENDTIME, EndTime, 0.0f); }
  void add_StateID(int32_t StateID) { fbb_.AddElement<int32_t>(StateEnd::VT_STATEID, StateID, 0); }
  StateEndBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  StateEndBuilder &operator=(const StateEndBuilder &);
  flatbuffers::Offset<StateEnd> Finish() {
    auto o = flatbuffers::Offset<StateEnd>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<StateEnd> CreateStateEnd(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t EntityID = 0,
    float EndTime = 0.0f,
    int32_t StateID = 0) {
  StateEndBuilder builder_(_fbb);
  builder_.add_StateID(StateID);
  builder_.add_EndTime(EndTime);
  builder_.add_EntityID(EntityID);
  return builder_.Finish();
}

}  // namespace GameEvent
}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_STATEEND_FBS_GAMEEVENT_H_
