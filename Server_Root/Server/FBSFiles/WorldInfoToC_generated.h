// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_WORLDINFOTOC_FBS_H_
#define FLATBUFFERS_GENERATED_WORLDINFOTOC_FBS_H_

#include "flatbuffers/flatbuffers.h"

#include "GameEventData_generated.h"

namespace FBS {

struct WorldInfoToC;

struct WorldInfoToC FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TICK = 4,
    VT_STARTTIME = 6,
    VT_ENDTIME = 8,
    VT_GAMEEVENTS = 10
  };
  int32_t Tick() const { return GetField<int32_t>(VT_TICK, 0); }
  float StartTime() const { return GetField<float>(VT_STARTTIME, 0.0f); }
  float EndTime() const { return GetField<float>(VT_ENDTIME, 0.0f); }
  const flatbuffers::Vector<flatbuffers::Offset<FBS::GameEventData>> *GameEvents() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FBS::GameEventData>> *>(VT_GAMEEVENTS); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TICK) &&
           VerifyField<float>(verifier, VT_STARTTIME) &&
           VerifyField<float>(verifier, VT_ENDTIME) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_GAMEEVENTS) &&
           verifier.Verify(GameEvents()) &&
           verifier.VerifyVectorOfTables(GameEvents()) &&
           verifier.EndTable();
  }
};

struct WorldInfoToCBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Tick(int32_t Tick) { fbb_.AddElement<int32_t>(WorldInfoToC::VT_TICK, Tick, 0); }
  void add_StartTime(float StartTime) { fbb_.AddElement<float>(WorldInfoToC::VT_STARTTIME, StartTime, 0.0f); }
  void add_EndTime(float EndTime) { fbb_.AddElement<float>(WorldInfoToC::VT_ENDTIME, EndTime, 0.0f); }
  void add_GameEvents(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBS::GameEventData>>> GameEvents) { fbb_.AddOffset(WorldInfoToC::VT_GAMEEVENTS, GameEvents); }
  WorldInfoToCBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  WorldInfoToCBuilder &operator=(const WorldInfoToCBuilder &);
  flatbuffers::Offset<WorldInfoToC> Finish() {
    auto o = flatbuffers::Offset<WorldInfoToC>(fbb_.EndTable(start_, 4));
    return o;
  }
};

inline flatbuffers::Offset<WorldInfoToC> CreateWorldInfoToC(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Tick = 0,
    float StartTime = 0.0f,
    float EndTime = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FBS::GameEventData>>> GameEvents = 0) {
  WorldInfoToCBuilder builder_(_fbb);
  builder_.add_GameEvents(GameEvents);
  builder_.add_EndTime(EndTime);
  builder_.add_StartTime(StartTime);
  builder_.add_Tick(Tick);
  return builder_.Finish();
}

inline flatbuffers::Offset<WorldInfoToC> CreateWorldInfoToCDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Tick = 0,
    float StartTime = 0.0f,
    float EndTime = 0.0f,
    const std::vector<flatbuffers::Offset<FBS::GameEventData>> *GameEvents = nullptr) {
  return CreateWorldInfoToC(_fbb, Tick, StartTime, EndTime, GameEvents ? _fbb.CreateVector<flatbuffers::Offset<FBS::GameEventData>>(*GameEvents) : 0);
}

}  // namespace FBS

#endif  // FLATBUFFERS_GENERATED_WORLDINFOTOC_FBS_H_
