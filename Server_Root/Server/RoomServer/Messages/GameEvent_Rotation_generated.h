// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_GAMEEVENTROTATION_H_
#define FLATBUFFERS_GENERATED_GAMEEVENTROTATION_H_

#include "flatbuffers/flatbuffers.h"

#include "FBSData_generated.h"

struct GameEvent_Rotation;

struct GameEvent_Rotation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ENTITYID = 4,
    VT_STARTTIME = 6,
    VT_ENDTIME = 8,
    VT_STARTROTATION = 10,
    VT_ENDROTATION = 12
  };
  int32_t EntityID() const { return GetField<int32_t>(VT_ENTITYID, 0); }
  float StartTime() const { return GetField<float>(VT_STARTTIME, 0.0f); }
  float EndTime() const { return GetField<float>(VT_ENDTIME, 0.0f); }
  const FBSData::Vector3 *StartRotation() const { return GetStruct<const FBSData::Vector3 *>(VT_STARTROTATION); }
  const FBSData::Vector3 *EndRotation() const { return GetStruct<const FBSData::Vector3 *>(VT_ENDROTATION); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ENTITYID) &&
           VerifyField<float>(verifier, VT_STARTTIME) &&
           VerifyField<float>(verifier, VT_ENDTIME) &&
           VerifyField<FBSData::Vector3>(verifier, VT_STARTROTATION) &&
           VerifyField<FBSData::Vector3>(verifier, VT_ENDROTATION) &&
           verifier.EndTable();
  }
};

struct GameEvent_RotationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_EntityID(int32_t EntityID) { fbb_.AddElement<int32_t>(GameEvent_Rotation::VT_ENTITYID, EntityID, 0); }
  void add_StartTime(float StartTime) { fbb_.AddElement<float>(GameEvent_Rotation::VT_STARTTIME, StartTime, 0.0f); }
  void add_EndTime(float EndTime) { fbb_.AddElement<float>(GameEvent_Rotation::VT_ENDTIME, EndTime, 0.0f); }
  void add_StartRotation(const FBSData::Vector3 *StartRotation) { fbb_.AddStruct(GameEvent_Rotation::VT_STARTROTATION, StartRotation); }
  void add_EndRotation(const FBSData::Vector3 *EndRotation) { fbb_.AddStruct(GameEvent_Rotation::VT_ENDROTATION, EndRotation); }
  GameEvent_RotationBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  GameEvent_RotationBuilder &operator=(const GameEvent_RotationBuilder &);
  flatbuffers::Offset<GameEvent_Rotation> Finish() {
    auto o = flatbuffers::Offset<GameEvent_Rotation>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<GameEvent_Rotation> CreateGameEvent_Rotation(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t EntityID = 0,
    float StartTime = 0.0f,
    float EndTime = 0.0f,
    const FBSData::Vector3 *StartRotation = 0,
    const FBSData::Vector3 *EndRotation = 0) {
  GameEvent_RotationBuilder builder_(_fbb);
  builder_.add_EndRotation(EndRotation);
  builder_.add_StartRotation(StartRotation);
  builder_.add_EndTime(EndTime);
  builder_.add_StartTime(StartTime);
  builder_.add_EntityID(EntityID);
  return builder_.Finish();
}

#endif  // FLATBUFFERS_GENERATED_GAMEEVENTROTATION_H_
