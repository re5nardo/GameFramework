// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_WORLDSNAPSHOTTOCDATA_H_
#define FLATBUFFERS_GENERATED_WORLDSNAPSHOTTOCDATA_H_

#include "flatbuffers/flatbuffers.h"

#include "FBSData_generated.h"

struct EntityState;

struct WorldSnapShotToC_Data;

struct EntityState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PLAYERINDEX = 4,
    VT_POSITION = 6,
    VT_ROTATION = 8,
    VT_BEHAVIORSMAPKEY = 10,
    VT_BEHAVIORSMAPVALUE = 12
  };
  int32_t PlayerIndex() const { return GetField<int32_t>(VT_PLAYERINDEX, 0); }
  const FBSData::Vector3 *Position() const { return GetStruct<const FBSData::Vector3 *>(VT_POSITION); }
  const FBSData::Vector3 *Rotation() const { return GetStruct<const FBSData::Vector3 *>(VT_ROTATION); }
  const flatbuffers::Vector<int32_t> *BehaviorsMapKey() const { return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_BEHAVIORSMAPKEY); }
  const flatbuffers::Vector<float> *BehaviorsMapValue() const { return GetPointer<const flatbuffers::Vector<float> *>(VT_BEHAVIORSMAPVALUE); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PLAYERINDEX) &&
           VerifyField<FBSData::Vector3>(verifier, VT_POSITION) &&
           VerifyField<FBSData::Vector3>(verifier, VT_ROTATION) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BEHAVIORSMAPKEY) &&
           verifier.Verify(BehaviorsMapKey()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BEHAVIORSMAPVALUE) &&
           verifier.Verify(BehaviorsMapValue()) &&
           verifier.EndTable();
  }
};

struct EntityStateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_PlayerIndex(int32_t PlayerIndex) { fbb_.AddElement<int32_t>(EntityState::VT_PLAYERINDEX, PlayerIndex, 0); }
  void add_Position(const FBSData::Vector3 *Position) { fbb_.AddStruct(EntityState::VT_POSITION, Position); }
  void add_Rotation(const FBSData::Vector3 *Rotation) { fbb_.AddStruct(EntityState::VT_ROTATION, Rotation); }
  void add_BehaviorsMapKey(flatbuffers::Offset<flatbuffers::Vector<int32_t>> BehaviorsMapKey) { fbb_.AddOffset(EntityState::VT_BEHAVIORSMAPKEY, BehaviorsMapKey); }
  void add_BehaviorsMapValue(flatbuffers::Offset<flatbuffers::Vector<float>> BehaviorsMapValue) { fbb_.AddOffset(EntityState::VT_BEHAVIORSMAPVALUE, BehaviorsMapValue); }
  EntityStateBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  EntityStateBuilder &operator=(const EntityStateBuilder &);
  flatbuffers::Offset<EntityState> Finish() {
    auto o = flatbuffers::Offset<EntityState>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<EntityState> CreateEntityState(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t PlayerIndex = 0,
    const FBSData::Vector3 *Position = 0,
    const FBSData::Vector3 *Rotation = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> BehaviorsMapKey = 0,
    flatbuffers::Offset<flatbuffers::Vector<float>> BehaviorsMapValue = 0) {
  EntityStateBuilder builder_(_fbb);
  builder_.add_BehaviorsMapValue(BehaviorsMapValue);
  builder_.add_BehaviorsMapKey(BehaviorsMapKey);
  builder_.add_Rotation(Rotation);
  builder_.add_Position(Position);
  builder_.add_PlayerIndex(PlayerIndex);
  return builder_.Finish();
}

inline flatbuffers::Offset<EntityState> CreateEntityStateDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t PlayerIndex = 0,
    const FBSData::Vector3 *Position = 0,
    const FBSData::Vector3 *Rotation = 0,
    const std::vector<int32_t> *BehaviorsMapKey = nullptr,
    const std::vector<float> *BehaviorsMapValue = nullptr) {
  return CreateEntityState(_fbb, PlayerIndex, Position, Rotation, BehaviorsMapKey ? _fbb.CreateVector<int32_t>(*BehaviorsMapKey) : 0, BehaviorsMapValue ? _fbb.CreateVector<float>(*BehaviorsMapValue) : 0);
}

struct WorldSnapShotToC_Data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TICK = 4,
    VT_TIME = 6,
    VT_ENTITYSTATES = 8
  };
  int32_t Tick() const { return GetField<int32_t>(VT_TICK, 0); }
  float Time() const { return GetField<float>(VT_TIME, 0.0f); }
  const flatbuffers::Vector<flatbuffers::Offset<EntityState>> *EntityStates() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<EntityState>> *>(VT_ENTITYSTATES); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TICK) &&
           VerifyField<float>(verifier, VT_TIME) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ENTITYSTATES) &&
           verifier.Verify(EntityStates()) &&
           verifier.VerifyVectorOfTables(EntityStates()) &&
           verifier.EndTable();
  }
};

struct WorldSnapShotToC_DataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Tick(int32_t Tick) { fbb_.AddElement<int32_t>(WorldSnapShotToC_Data::VT_TICK, Tick, 0); }
  void add_Time(float Time) { fbb_.AddElement<float>(WorldSnapShotToC_Data::VT_TIME, Time, 0.0f); }
  void add_EntityStates(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<EntityState>>> EntityStates) { fbb_.AddOffset(WorldSnapShotToC_Data::VT_ENTITYSTATES, EntityStates); }
  WorldSnapShotToC_DataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  WorldSnapShotToC_DataBuilder &operator=(const WorldSnapShotToC_DataBuilder &);
  flatbuffers::Offset<WorldSnapShotToC_Data> Finish() {
    auto o = flatbuffers::Offset<WorldSnapShotToC_Data>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<WorldSnapShotToC_Data> CreateWorldSnapShotToC_Data(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Tick = 0,
    float Time = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<EntityState>>> EntityStates = 0) {
  WorldSnapShotToC_DataBuilder builder_(_fbb);
  builder_.add_EntityStates(EntityStates);
  builder_.add_Time(Time);
  builder_.add_Tick(Tick);
  return builder_.Finish();
}

inline flatbuffers::Offset<WorldSnapShotToC_Data> CreateWorldSnapShotToC_DataDirect(flatbuffers::FlatBufferBuilder &_fbb,
    int32_t Tick = 0,
    float Time = 0.0f,
    const std::vector<flatbuffers::Offset<EntityState>> *EntityStates = nullptr) {
  return CreateWorldSnapShotToC_Data(_fbb, Tick, Time, EntityStates ? _fbb.CreateVector<flatbuffers::Offset<EntityState>>(*EntityStates) : 0);
}

#endif  // FLATBUFFERS_GENERATED_WORLDSNAPSHOTTOCDATA_H_
